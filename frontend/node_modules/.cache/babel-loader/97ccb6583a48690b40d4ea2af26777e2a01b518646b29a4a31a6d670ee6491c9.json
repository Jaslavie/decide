{"ast":null,"code":"var _jsxFileName = \"/Users/jaslavie/decide/frontend/src/components/context.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = () => {\n  _s();\n  /**\n   * - show previously collected context about the user\n   * - allow the user to add new context\n   */\n  const [context, setContext] = useState([]); // history of context\n  const [newContext, setNewContext] = useState(''); // new context added by user\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  //  initialize context from memory \n  useEffect(() => {\n    const fetchContext = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch('http://localhost:8000/context');\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setContext(data);\n      } catch (error) {\n        console.error('Error fetching context:', error);\n        setError('Failed to load context. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchContext();\n  }, []);\n\n  // add new context to memory\n  const addContext = async text => {\n    if (!text.trim()) return;\n    try {\n      const response = await fetch('http://localhost:8000/context', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const newContextItem = await response.json();\n      setContext([...context, newContextItem]);\n      setNewContext(''); // Clear input after successful add\n      console.log(\"added new context:\", newContextItem);\n    } catch (error) {\n      console.error('Error adding context:', error);\n      alert('Failed to add context. Please try again.');\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading context...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Context\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"context-list\",\n      children: context.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"category\",\n          children: item.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text\",\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-context\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newContext,\n        onChange: e => setNewContext(e.target.value),\n        placeholder: \"Add new context\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addContext(newContext),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_s(Context, \"H1gNtqIDHCKz8huoBSqj9MqQBWY=\");\n_c = Context;\nexport default Context;\nvar _c;\n$RefreshReg$(_c, \"Context\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Context","_s","context","setContext","newContext","setNewContext","loading","setLoading","error","setError","fetchContext","response","fetch","ok","Error","status","data","json","console","addContext","text","trim","method","headers","body","JSON","stringify","newContextItem","log","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","item","index","category","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/jaslavie/decide/frontend/src/components/context.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Context = () => {\n    /**\n     * - show previously collected context about the user\n     * - allow the user to add new context\n     */\n    const [context, setContext] = useState([]); // history of context\n    const [newContext, setNewContext] = useState(''); // new context added by user\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    \n    //  initialize context from memory \n    useEffect(() => {\n        const fetchContext = async () => {\n            try {\n                setLoading(true);\n                setError(null);\n                const response = await fetch('http://localhost:8000/context');\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                setContext(data);\n            } catch (error) {\n                console.error('Error fetching context:', error);\n                setError('Failed to load context. Please try again later.');\n            } finally {\n                setLoading(false);\n            }\n        };\n        fetchContext();\n    }, []);\n\n    // add new context to memory\n    const addContext = async (text) => {\n        if (!text.trim()) return;\n        \n        try {\n            const response = await fetch('http://localhost:8000/context', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ text }),\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const newContextItem = await response.json();\n            setContext([...context, newContextItem]);\n            setNewContext(''); // Clear input after successful add\n            console.log(\"added new context:\", newContextItem);\n        } catch (error) {\n            console.error('Error adding context:', error);\n            alert('Failed to add context. Please try again.');\n        }\n    };\n    \n    if (loading) return <div>Loading context...</div>;\n    if (error) return <div className=\"error\">{error}</div>;\n\n    return (\n        <div>\n            <h1>Context</h1>\n            <div className=\"context-list\">\n                {context.map((item, index) => (\n                    <div key={index} className=\"context-item\">\n                        <span className=\"category\">{item.category}</span>\n                        <p className=\"text\">{item.text}</p>\n                    </div>\n                ))}\n            </div>\n            <div className=\"add-context\">\n                <input\n                    type=\"text\"\n                    value={newContext}\n                    onChange={(e) => setNewContext(e.target.value)}\n                    placeholder=\"Add new context\"\n                />\n                <button onClick={() => addContext(newContext)}>Add</button>\n            </div>\n            \n        </div>\n    );\n};\n\nexport default Context;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}