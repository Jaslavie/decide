{"ast":null,"code":"var _jsxFileName = \"/Users/jaslavie/decide/frontend/src/components/context.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = () => {\n  _s();\n  /**\n   * - show previously collected context about the user\n   * - allow the user to add new context\n   */\n  const [context, setContext] = useState([]); // history of context\n  const [newContext, setNewContext] = useState(''); // new context added by user\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  //  initialize context from memory \n  useEffect(() => {\n    const fetchContext = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await fetch('http://localhost:8000/get_context', {\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        // set context to the context array fetched from the backend\n        setContext(Array.isArray(data.contexts) ? data.contexts : []);\n        console.log(\"context:\", data.contexts);\n      } catch (error) {\n        console.error('Error fetching context:', error);\n        setError('Failed to load context. Please try again later.');\n        setContext([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchContext();\n  }, []);\n\n  // add new context to memory\n  const addContext = async (text, category) => {\n    if (!text.trim()) return;\n    try {\n      const response = await fetch('http://localhost:8000/add_context', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          text: text,\n          category: category // Add default category\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const newContextItem = await response.json();\n      if (newContextItem.status === 'error') {\n        throw new Error(newContextItem.message);\n      }\n      setContext([...context, newContextItem]);\n      setNewContext(''); // Clear input after successful add\n\n      console.log(\"full array of \", newContextItem);\n    } catch (error) {\n      console.error('Error adding context:', error);\n      alert('Failed to add context: ' + error.message);\n    }\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading context...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Context\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"context-list\",\n      children: context.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"context-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"category\",\n          children: item.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text\",\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-context\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newContext,\n        onChange: e => setNewContext(e.target.value),\n        placeholder: \"Add new context\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => addContext(newContext),\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(Context, \"H1gNtqIDHCKz8huoBSqj9MqQBWY=\");\n_c = Context;\nexport default Context;\nvar _c;\n$RefreshReg$(_c, \"Context\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Context","_s","context","setContext","newContext","setNewContext","loading","setLoading","error","setError","fetchContext","response","fetch","method","headers","ok","Error","status","data","json","Array","isArray","contexts","console","log","addContext","text","category","trim","body","JSON","stringify","newContextItem","message","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","item","index","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/jaslavie/decide/frontend/src/components/context.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Context = () => {\n    /**\n     * - show previously collected context about the user\n     * - allow the user to add new context\n     */\n    const [context, setContext] = useState([]); // history of context\n    const [newContext, setNewContext] = useState(''); // new context added by user\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    \n    //  initialize context from memory \n    useEffect(() => {\n        const fetchContext = async () => {\n            try {\n                setLoading(true);\n                setError(null);\n                const response = await fetch('http://localhost:8000/get_context', {\n                    method: 'GET',\n                    headers: {\n                        'Content-Type': 'application/json',\n                    },\n                });\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                // set context to the context array fetched from the backend\n                setContext(Array.isArray(data.contexts) ? data.contexts : []);\n                console.log(\"context:\", data.contexts);\n            } catch (error) {\n                console.error('Error fetching context:', error);\n                setError('Failed to load context. Please try again later.');\n                setContext([]);\n            } finally {\n                setLoading(false);\n            }\n        };\n        fetchContext();\n    }, []);\n\n    // add new context to memory\n    const addContext = async (text, category) => {\n        if (!text.trim()) return;\n        \n        try {\n            const response = await fetch('http://localhost:8000/add_context', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ \n                    text: text,\n                    category: category  // Add default category\n                }),\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            }\n            const newContextItem = await response.json();\n            if (newContextItem.status === 'error') {\n                throw new Error(newContextItem.message);\n            }\n            setContext([...context, newContextItem]);\n            setNewContext(''); // Clear input after successful add\n\n            console.log(\"full array of \", newContextItem);\n        } catch (error) {\n            console.error('Error adding context:', error);\n            alert('Failed to add context: ' + error.message);\n        }\n    };\n    \n    if (loading) return <div>Loading context...</div>;\n    if (error) return <div className=\"error\">{error}</div>;\n\n    return (\n        <div>\n            <h1>Context</h1>\n            <div className=\"context-list\">\n                {context.map((item, index) => (\n                    <div key={index} className=\"context-item\">\n                        <span className=\"category\">{item.category}</span>\n                        <p className=\"text\">{item.text}</p>\n                    </div>\n                ))}\n            </div>\n            <div className=\"add-context\">\n                <input\n                    type=\"text\"\n                    value={newContext}\n                    onChange={(e) => setNewContext(e.target.value)}\n                    placeholder=\"Add new context\"\n                />\n                <button onClick={() => addContext(newContext)}>Add</button>\n            </div>\n            \n        </div>\n    );\n};\n\nexport default Context;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}